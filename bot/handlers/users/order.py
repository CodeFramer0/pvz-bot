from io import BytesIO

from aiogram import types
from aiogram.dispatcher import FSMContext
from api import OrderAPI, PickupPointAPI, TelegramUserAPI
from keyboards.inline import order_keyboards
from keyboards.inline.callback_data import (
    cb_order_action,
    cb_order_marketplace_action,
    cb_order_pickup_point_action,
)
from loader import bot, dp
from states.order import OrderStates
from aiogram.utils.exceptions import MessageCantBeDeleted, MessageToForwardNotFound


async def delete_message(chat_id, message_id):
    try:
        await bot.delete_message(chat_id, message_id)
    except MessageCantBeDeleted:
        pass


@dp.message_handler(content_types=["photo"])
async def handle_photo(message: types.Message, state: FSMContext, user):
    photo = message.photo[-1]
    file_id = photo.file_id

    file = await bot.get_file(file_id)
    file_path = file.file_path
    await message.delete()
    await state.update_data(file_path=file_path)
    message = await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ!\n<strong>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –§–ò–û.</strong>",
        reply_markup=order_keyboards.cancel(),
    )
    await state.update_data(message_id=message.message_id)
    await OrderStates.waiting_for_full_name.set()


@dp.message_handler(state=OrderStates.waiting_for_full_name)
async def handle_full_name(message: types.Message, state: FSMContext):
    await message.delete()
    full_name = message.text
    await state.update_data(full_name=full_name)
    user_data = await state.get_data()
    message_id = user_data.get("message_id")
    await bot.edit_message_text(
        "<strong>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å.</strong>",
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=order_keyboards.marketplaces(),
    )
    await OrderStates.waiting_for_marketplace.set()


@dp.callback_query_handler(
    cb_order_marketplace_action.filter(action="choose_marketplace"),
    state=OrderStates.waiting_for_marketplace,
)
async def choose_marketplace(
    query: types.CallbackQuery, callback_data: dict, state: FSMContext
):
    await query.answer("")
    marketplace = callback_data["marketplace"]
    pickup_points = await PickupPointAPI().get(params={"marketplace": marketplace})
    await query.message.edit_text(
        "–°—É–ø–µ—Ä!\n<strong>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤.</strong>",
        reply_markup=order_keyboards.pickup_points(pickup_points),
    )
    await OrderStates.waiting_for_pickup_point.set()


@dp.callback_query_handler(
    cb_order_pickup_point_action.filter(action="choose_pickup_point"),
    state=OrderStates.waiting_for_pickup_point,
)
async def handle_pickup_point(
    query: types.CallbackQuery, callback_data: dict, state: FSMContext
):
    await query.answer("")
    await state.update_data(pickup_point_id=callback_data["pickup_point_id"])
    await query.message.edit_text(
        "–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ :) \n" "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—É–º–º—É –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.",
        reply_markup=order_keyboards.cancel(),
    )
    await OrderStates.waiting_for_amount.set()


@dp.callback_query_handler(
    cb_order_pickup_point_action.filter(action="choose_pickup_point"),
    state=OrderStates.waiting_for_pickup_point,
)
@dp.message_handler(state=OrderStates.waiting_for_amount)
async def handle_amount(message: types.Message, state: FSMContext, user):
    await message.delete()
    amount = message.text
    await state.update_data(amount=amount)
    user_data = await state.get_data()
    message_id = user_data.get("message_id")
    await bot.edit_message_text(
        "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥:\n"
        "<strong>–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –í–∞—à–µ–º—É –∑–∞–∫–∞–∑—É.\n\n–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –í–∞–º –Ω–µ –Ω—É–∂–µ–Ω –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.</strong>",
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=order_keyboards.skip(),
    )
    await OrderStates.waiting_for_comment.set()


@dp.message_handler(state=OrderStates.waiting_for_comment)
async def handle_comment(message: types.Message, state: FSMContext, user):
    await message.delete()
    user_data = await state.get_data()
    full_name = user_data.get("full_name")
    amount = user_data.get("amount")
    file_path = user_data.get("file_path")
    pickup_point_id = user_data.get("pickup_point_id")
    comment = message.text

    image_data = await bot.download_file(file_path)
    image_bytes = BytesIO(image_data.getvalue())

    image_bytes.name = "image.jpg"

    order = await OrderAPI().create(
        body={
            "full_name": full_name,
            "pickup_point": pickup_point_id,
            "customer": user["id"],
            "comment": comment,
            "amount": amount,
        },
        files={"barcode_image": image_bytes},
    )

    if order:
        await delete_message(
            chat_id=message.chat.id, message_id=user_data["message_id"]
        )
        pickup_point = await PickupPointAPI().get(id=order["pickup_point"])
        forward_message = await message.answer_photo(
            photo=types.InputFile(image_data),
            caption=f"<strong>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order['id']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!. </strong>üéâ\n"
            f"<strong>–§–ò–û:</strong> {order['full_name']}\n"
            f"<strong>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:</strong> {pickup_point['marketplace']}\n"
            f"<strong>–ê–¥—Ä–µ—Å:</strong> {pickup_point['address']}\n"
            f"<strong>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</strong> {order['amount']}\n"
            f"<strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</strong> {order['comment']}\n\n"
            f"<strong>–Ø—á–µ–π–∫–∞:</strong> ‚Ññ{user['id']} (–Ω–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è, <strong>—è –ø—Ä–∏—à–ª—é –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</strong>",
        )
        admin = await TelegramUserAPI().get(id=pickup_point["admin_telegram_user"])
        try:
            await bot.forward_message(
                chat_id=admin["user_id"],
                from_chat_id=message.chat.id,
                message_id=forward_message.message_id,
            )
        except MessageToForwardNotFound:
            pass
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        )

    await state.finish()


@dp.callback_query_handler(
    cb_order_action.filter(action="cancel"),
    state=OrderStates,
)
async def cancel(query: types.CallbackQuery, state: FSMContext):
    await query.answer("")
    await query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.finish()


@dp.callback_query_handler(
    cb_order_action.filter(action="skip"),
    state=OrderStates.waiting_for_comment,
)
async def skip(query: types.CallbackQuery, state: FSMContext, user):
    await query.answer("")
    user_data = await state.get_data()
    full_name = user_data.get("full_name")
    file_path = user_data.get("file_path")
    pickup_point_id = user_data.get("pickup_point_id")
    amount = user_data.get("amount")
    comment = ""

    image_data = await bot.download_file(file_path)
    image_bytes = BytesIO(image_data.getvalue())

    image_bytes.name = "image.jpg"

    order = await OrderAPI().create(
        body={
            "full_name": full_name,
            "pickup_point": pickup_point_id,
            "customer": user["id"],
            "comment": comment,
            "amount": amount,
        },
        files={"barcode_image": image_bytes},
    )

    if order:
        await delete_message(
            chat_id=query.message.chat.id, message_id=user_data["message_id"]
        )
        pickup_point = await PickupPointAPI().get(id=order["pickup_point"])
        forward_message = await query.message.answer_photo(
            photo=types.InputFile(image_data),
            caption=f"<strong>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order['id']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!. </strong>üéâ\n"
            f"<strong>–§–ò–û:</strong> {order['full_name']}\n"
            f"<strong>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:</strong> {pickup_point['marketplace']}\n"
            f"<strong>–ê–¥—Ä–µ—Å:</strong> {pickup_point['address']}\n"
            f"<strong>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</strong> {order['amount']}\n"
            f"<strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</strong> {order['comment']}\n\n"
            f"<strong>–Ø—á–µ–π–∫–∞:</strong> ‚Ññ{user['id']} (–Ω–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è, <strong>—è –ø—Ä–∏—à–ª—é –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</strong>",
        )
        admin = await TelegramUserAPI().get(id=pickup_point["admin_telegram_user"])
        try:
            await bot.forward_message(
                chat_id=admin["user_id"],
                from_chat_id=query.from_user.id,
                message_id=forward_message.message_id,
            )
        except MessageToForwardNotFound:
            pass
    else:
        await query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        )

    await state.finish()
